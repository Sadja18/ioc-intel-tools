import requests

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class URLTrie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, url):
        node = self.root
        for char in url:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, substring):
        node = self.root
        for char in substring:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word  

def get_malware_url_source():
    try:
        response = requests.get("https://urlhaus.abuse.ch/downloads/text")

        if response.status_code ==200:
            # print(response.content)
            content = response.content

            print("content")
            # print(type(content))
            content_str = content.decode('utf-8')
            print("content_str")

            list_raw =content_str.split("# url")
            print("list_raw")
            print(len(list_raw))
            list_url_raw = list_raw[1].split("\n")
            
            # since the number of malware source URLs is large
            # sequential search might take too much time
            # therefore, trie structure is implemented
            trie = URLTrie()

            for item in list_url_raw:
                a = item.strip()
                if len(a) > 0:
                    trie.insert(a)
            return trie
            
            

        elif response.status_code == 500:
            print('internal server error')
            return []
        else:
            print('some other error')
            return []

        # return response
        pass
    except Exception as identifier:
        print('could not fetch URL sources for malware')
        print(identifier)
        return []